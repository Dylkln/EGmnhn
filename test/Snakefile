import glob


configfile: "config/config.yml"

def get_files(config):
    return glob.glob(config)

def get_an_files(config):
    files = glob.glob(config)
    return [i.split("-")[1] for i in files]

# ================= GET CONFIG / GET OUTPUTS ================= #

FASTA = get_files(config["fasta"])
CAT_F = config["concat_file"]
DDB = config["diamond_database"]
DBT = config["diamond_blastp"]
AN_F = get_an_files(config["annotation"])
ATBT = config["attributes"]
COL = config["columns"]
NET_F = config["network_file"]

FILTR = expand("results/diamond_ssn_pcov{overlap}_pident{identity}",
                overlap=config["filtration"]["overlap"],
                identity=config["filtration"]["identity"])
FILTR_S = expand("results/diamond_ssn_pcov{overlap}_pident{identity}_stats",
                overlap=config["filtration"]["overlap"],
                identity=config["filtration"]["identity"])
EDGES = expand("results/diamond_ssn_pcov{overlap}_pident{identity}.edges",
                overlap=config["filtration"]["overlap"],
                identity=config["filtration"]["identity"])
VERTI = expand("results/diamond_ssn_pcov{overlap}_pident{identity}.vertices",
                overlap=config["filtration"]["overlap"],
                identity=config["filtration"]["identity"])
ATTRIB = expand("results/attributes/{files}.attributes", files=FASTA)

VER_ATTRIB = expand("results/diamond_ssn_pcov{overlap}_pident{identity}_with_attributes.vertices",
                overlap=config["filtration"]["overlap"],
                identity=config["filtration"]["identity"])

COL_RESLTS = expand("results/pcov{overlap}_pident{identity}_ssn_{col}_results",
                overlap=config["filtration"]["overlap"],
                identity=config["filtration"]["identity"],
                col=COL)
# ============================================== #

rule all:
    input:
        CAT_F,
        DDB,
        DBT,
        FILTR,
        FILTR_S,
        EDGES,
        VERTI,
        ATTRIB,
        VER_ATTRIB,
        COL_RESLTS


if FASTA:
    rule cat:
        input:
            FASTA
        output:
            CAT_F
        log:
            "logs/cat.log"
        benchmark:
            "benchmarks/cat.bench"
        script:
            "modules/cat.py"


    rule diamond_db:
        input:
            CAT_F
        output:
            DDB
        log:
            "logs/diamond_db.log"
        benchmark:
            "benchmarks/diamond_db.bench"
        run:
            import subprocess
            from subprocess import DEVNULL
            try:
                command = ["diamond-aligner", "makedb", "--in", str(input), "--db", str(output)]
                subprocess.call(command,stdout=DEVNULL)

            except:
                command = ["diamond", "makedb", "--in", str(input), "--db", str(output)]
                subprocess.call(command,stdout=DEVNULL)


    rule diamond_blastp:
        input:
            db=DDB,
            fasta=FASTA
        output:
            DBT
        log:
            "logs/diamond_blatp.log"
        benchmark:
            "benchmarks/diamond_blatp.bench"
        run:
            import subprocess
            from subprocess import DEVNULL

            try:
                command = ["diamond-aligner", "blastp", "-d", str(input.db), "-q", str(input.fasta),
                           "-o", str(output), "-e", "1e-5", "--sensitive", "-f", "6", "qseqid", "qlen",
                           "qstart", "qend", "sseqid", "slen", "sstart", "send", "length", "pident",
                           "ppos", "score", "evalue", "bitscore"]
                subprocess.call(command,stdout=DEVNULL)

            except:
                command = ["diamond", "blastp", "-d", str(input.db), "-q", str(input.fasta), "-o",
                           str(output), "-e", "1e-5", "--sensitive", "-f", "6", "qseqid", "qlen",
                           "qstart", "qend", "sseqid", "slen", "sstart", "send", "length", "pident",
                           "ppos", "score", "evalue", "bitscore"]
                subprocess.call(command,stdout=DEVNULL)


rule filter:
    input:
        DBT
    params:
        overlap=config["filtration"]["overlap"],
        identity=config["filtration"]["identity"]
    output:
        FILTR,
        FILTR_S
    log:
        "logs/filter.log"
    benchmark:
        "benchmarks/filter.bench"
    script:
        "modules/filter.py"


if config["conversion"] == "yes":
    rule diamond2graph:
        input:
            expand("results/diamond_ssn_pcov{overlap}_pident{identity}",
                    overlap=config["filtration"]["overlap"],
                    identity=config["filtration"]["identity"])
        output:
            expand("results/diamond_ssn_pcov{overlap}_pident{identity}.edges",
                    overlap=config["filtration"]["overlap"],
                    identity=config["filtration"]["identity"]),
            expand("results/diamond_ssn_pcov{overlap}_pident{identity}.vertices",
                    overlap=config["filtration"]["overlap"],
                    identity=config["filtration"]["identity"])
        log:
            "logs/diamond2graph.log"
        benchmark:
            "benchmarks/diamond2graph.bench"
        run:
            import subprocess
            from subprocess import DEVNULL
            for file in input:
                command = ["perl", "modules/diamond2graph.pl", "--input", file]
                subprocess.call(command, stdout=DEVNULL)


if not config["attributes"]:
    rule attributes:
        input:
            get_files(config["annotation"])
        output:
            expand("results/attributes/{sample}.attributes", sample=get_an_files(config["annotation"]))
        log:
            "logs/attributes.log"
        benchmark:
            "benchmarks/attributes.bench"
        params:
            columns=config["columns"]
        script:
            "modules/attributes.py"


rule vertices:
    input:
        attrib=expand("results/attributes/{sample}.attributes",
        sample=get_an_files(config["annotation"])),
        vertices=expand("results/diamond_ssn_pcov{overlap}_pident{identity}.vertices",
        overlap=config["filtration"]["overlap"], identity=config["filtration"]["identity"])
    output:
        expand("results/diamond_ssn_pcov{overlap}_pident{identity}_with_attributes.vertices",
                overlap=config["filtration"]["overlap"],
                identity=config["filtration"]["identity"])
    log:
        "logs/add_attributes.log"
    benchmark:
        "benchmarks/add_attributes.bench"
    params:
        columns=config["columns"]
    script:
        "modules/add.py"


rule network:
    input:
        edges=expand("results/diamond_ssn_pcov{overlap}_pident{identity}.edges",
                overlap=config["filtration"]["overlap"],
                identity=config["filtration"]["identity"]),
        vertices=expand("results/diamond_ssn_pcov{overlap}_pident{identity}_with_attributes.vertices",
                overlap=config["filtration"]["overlap"],
                identity=config["filtration"]["identity"])
    output:
        expand("results/pcov{overlap}_pident{identity}_ssn_{col}_results",
                overlap=config["filtration"]["overlap"],
                identity=config["filtration"]["identity"],
                col=config["columns"])
    log:
        "logs/network.log"
    benchmark:
        "benchmarks/network.bench"
    params:
        neighbours=config["neighbours"],
        columns=config["columns"],
        isolated=config["isolated"],
        similarity=config["network_file"],
        overlap=config["filtration"]["overlap"],
        identity=config["filtration"]["identity"]
    script:
        "modules/network.py"